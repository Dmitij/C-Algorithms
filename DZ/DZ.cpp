
#include <sstream>
#include <iostream>
#include <conio.h>
#include <ctime>
#include <chrono>
#include "DZ1.h"
#include "DZ2.h"
#include "DZ3.h"
#include "DZ4.h"
#include "DZ5.h"
#include "DZ6.h"
//Рязанцев Дмитрий

using namespace std;


void HW1()
{
	char ch_key;
	bool bMENU = true;
	while (bMENU)
	{
		system("cls");
		cout << "**Домашнее задание 1***\n";
		cout << "1. Ввести вес и рост человека.Рассчитать и вывести индекс массы тела по формуле I = m / (h * h); где m - масса тела в килограммах, h - рост в метрах.\n";
		cout << "2. Написать программу обмена значениями двух целочисленных переменных : b. * без использования третьей переменной.\n";
		cout << "3. Написать программу нахождения корней заданного квадратного уравнения.\n";
		cout << "4. Ввести возраст человека(от 1 до 150 лет) и вывести его вместе с последующим словом «год», «года» или «лет».\n";
		cout << "5. Имеются числовые координаты двух полей шахматной доски(x1, y1, x2, y2).Требуется определить, относятся ли к поля к одному цвету или нет.\n";
		cout << "6. Даны целые положительные числа N и K.Используя только операции сложения и вычитания, найти частное от деления нацело N на K, а также остаток от этого деления.\n";
		cout << "7. Дано целое число N(> 0).С помощью операций деления нацело и взятия остатка от деления определить, имеются ли в записи числа N нечетные цифры.Если имеются, то вывести True, если нет — вывести False.\n";
		cout << "8. * Автоморфные числа.Натуральное число называется автоморфным, если оно равно последним цифрам своего квадрата.Например, 25 \ :sup: 2 = 625. Напишите программу, которая выводит на экран все автоморфные числа, в пределах 1_000_000\n";
		cout << "9. Дублирую задание по улучшению алгоритма с урока))\n";

		switch ((ch_key = _getch()))
		{
		case '1':
			HW11();
			break;
		case '2':
			HW12();
			break;
		case '3':
			HW13();
			break;
		case '4':
			HW14();
			break;
		case '5':
			HW15();
			break;
		case '6':
			HW16();
			break;
		case '7':
			HW17();
			break;
		case '8':
			HW18();
			break;
		case '9':
			HW19();
			break;

		case 27:
			bMENU = false;
			break;
		default:
			cout << "Unsupported key was pressed\n";
			system("pause");
			break;
		}
	}
}
void HW2()
{
	char ch_key;
	bool bMENU = true;
	while (bMENU)
	{
		system("cls");
		cout << "**Домашнее задание 2***\n";
		cout << "1 - Реализовать функцию перевода из 10 системы в двоичную используя рекурсию.\n";
		cout << "2 - Реализовать функцию возведения числа a в степень b  - (a) без рекурсии; (b) рекурсивно; (c)* рекурсивно, используя свойство чётности степени.\n";
		cout << "3 - Исполнитель Калькулятор преобразует целое число, записанное на экране.У исполнителя две команды, каждой команде присвоен номер : Прибавь 1 2.Умножь на 2 Первая команда увеличивает число на экране на 1, вторая увеличивает это число в 2 раза.Сколько существует программ, которые число 3 преобразуют в число 20 ? а) с использованием массива; б) с использованием рекурсии.\n";
		cout << "ESC - Exit\n";

		switch ((ch_key = _getch()))
		{
		case '1':
			HW21();
			break;
		case '2':
			HW22();
			break;
		case '3':
			HW23();
			break;

		case 27:
			bMENU = false;
			break;
		default:
			cout << "Unsupported key was pressed\n";
			system("pause");
			break;
		}
	}
}
void HW3()
{
	char ch_key;
	bool bMENU = true;
	while (bMENU)
	{
		system("cls");
		cout << "**Домашнее задание 3***\n";
		cout << "1. Попробовать оптимизировать пузырьковую сортировку.Сравнить количество операций сравнения оптимизированной и не оптимизированной программы.Написать функции сортировки, которые возвращают количество операций.\n";
		cout << " Реализовать шейкерную сортировку.\n";
		cout << " optional.Погуглить как осуществляется Pigeon Hole Sort и попробовать реализовать на языке С.";
		cout << "ESC - Exit\n";

		switch ((ch_key = _getch()))
		{
		case '1':
			HW31();
			break;

		case 27:
			bMENU = false;
			break;
		default:
			cout << "Unsupported key was pressed\n";
			system("pause");
			break;
		}
	}
}
void HW4()
{
	char ch_key;
	bool bMENU = true;
	while (bMENU)
	{
		system("cls");
		cout << "**Домашнее задание 4***\n";
		cout << "1. *Количество маршрутов с препятствиями. Реализовать чтение массива с препятствием и нахождение количество маршрутов.\n";
		cout << "2. ***Требуется обойти конём шахматную доску размером NxM, пройдя через все поля доски по одному разу.\n";
		cout << "ESC - Exit\n";

		switch ((ch_key = _getch()))
		{
		case '1':
			HW41();
			break;
		case '2':
			HW42();
			break;
		case 27:
			bMENU = false;
			break;
		default:
			cout << "Unsupported key was pressed\n";
			system("pause");
			break;
		}
	}
}
void HW5()
{
	char ch_key;
	bool bMENU = true;
	while (bMENU)
	{
		system("cls");
		cout << "**Домашнее задание 5***\n";
		cout << "1. Написать программу, которая определяет, является ли введенная скобочная последовательность правильной. Примеры правильных скобочных выражений: (), ([])(), {}(), ([{}]), неправильных — )(, ())({), (, ])}), ([(]) для скобок [,(,{.	Например: (2 + (2 * 2)) или[2 / {5 * (4 + 7)}].\n";
		cout << "2. * Создать функцию, копирующую односвязный список(то есть создает в памяти копию односвязного списка, без удаления первого списка).\n";
		cout << "3. * Реализовать очередь на основе двусвязного списка.\n";
		cout << "ESC - Exit\n";

		switch ((ch_key = _getch()))
		{
		case '1':
			HW51();
			break;
		case '2':
			HW52();
			break;
		case 27:
			bMENU = false;
			break;
		default:
			cout << "Unsupported key was pressed\n";
			system("pause");
			break;
		}
	}
}
void HW6()
{
	char ch_key;
	bool bMENU = true;
	while (bMENU)
	{
		system("cls");
		cout << "**Домашнее задание 6***\n";
		cout << "1. Реализовать простейшую хэш-функцию. На вход функции подается строка, на выходе сумма кодов символов.\n";
		cout << "2. Реализовать двоичное дерево поиска а) Добавить обход дерева различными способами; б) Реализовать поиск в двоичном дереве поиска;\n";
		//cout << "3. ***Разработать базу данных студентов из двух полей “Имя”, “Возраст”, “Табельный номер” в которой использовать все знания, полученные на уроках.\n";
		cout << "ESC - Exit\n";

		switch ((ch_key = _getch()))
		{
		case '1':
			HW61();
			break;
		case '2':
			HW62();
			break;
		case 27:
			bMENU = false;
			break;
		default:
			cout << "Unsupported key was pressed\n";
			system("pause");
			break;
		}
	}
}
//
//
void MainMenu()
{
	char ch_key;
	bool bMENU = true;
	while (bMENU)
	{
		system("cls");
		cout << "***MENU***\n";
		cout << "1 - Домашняя работа 1\n";
		cout << "2 - Домашняя работа 2\n";
		cout << "3 - Домашняя работа 3\n";
		cout << "4 - Домашняя работа 4\n";
		cout << "5 - Домашняя работа 5\n";
		cout << "6 - Домашняя работа 6\n";
		cout << "ESC - Exit\n";

		switch ((ch_key = _getch()))
		{
		case '1':
			HW1();
			break;
		case '2':
			HW2();
			break;
		case '3':
			HW3();
			break;
		case '4':
			HW4();
			break;
		case '5':
			HW5();
			break;
		case '6':
			HW6();
			break;
		case 27:
			bMENU = false;
			cout << "Exit from program\n";
			break;
		default:
			cout << "Unsupported key was pressed\n";
			system("pause");
			break;
		}
	}
}


int main()
{
	setlocale(LC_ALL, "Russian");
	MainMenu();

	system("pause");
	return 0;//
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
